version: "3.8"

volumes:
  postgres_data:
      driver: local
  products-db:



services:  

  zookeeper:
      image: confluentinc/cp-zookeeper:7.2.1
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
      networks:
      - orders

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8097,INTERNAL://kafka:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
     - orders
    restart: on-failure
    healthcheck:
        test: ["CMD", "ping", "-c","1", "localhost:8097"]
        interval: 30s
        timeout: 10s
        retries: 5

  control-center:
      image: confluentinc/cp-enterprise-control-center:latest
      hostname: control-center
      depends_on:
        - kafka
      ports:
        - "9021:9021"
      expose:
        - 9021
      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:19092'
        CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        PORT: 9021
      networks:
      - orders
      restart: always


  postgres:
      image: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password
  keycloak:
      image: quay.io/keycloak/keycloak:legacy
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        #KEYCLOAK_USER: admin
        #KEYCLOAK_PASSWORD: Pa55w0rd
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      ports:
        - 8080:8080
      depends_on:
        - postgres

  product-service:
    build:
      context: ./backend/product_service
    container_name: product_service
    command: npm start
    restart: always
    ports:
      - "5101:5101"
    environment:
      - PORT=5101
    networks:
      - products
    depends_on:
      - products_db
 
 
  products_db:
    container_name: products_db
    image: mysql
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: products_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - '3310:3306'
    expose:
      # Opens port 3306 on the container
      - '3310'
      # Where our data will be persisted
    volumes:
      - ./db_data/products-db:/var/lib/mysql
    networks:
      - products
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  order-service:
    build:
      context: ./backend/order_service
    container_name: order_service
    command: npm start
    restart: always
    ports:
      - "5050:5050"
    environment:
      - PORT=5050
    networks:
      - orders
    depends_on:
      - orders_db
      - kafka
  
  orders_db: 
    image: mysql
    ports: 
      - "3308:3306"
    expose:
      # Opens port 3306 on the container
      - 3308
    container_name: orders_db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_DATABASE: order_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_ROOT_PASSWORD: admin 
    volumes:
      - ./db_data/orders-db:/var/lib/mysql   
    networks:
      - orders
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
  

networks:
  default:
      driver: bridge
  products:
  orders:
      driver: bridge
  